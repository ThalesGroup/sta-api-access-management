/*
 * Simple Store API
 *
 * A simple store API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.Runtime.Serialization;

// ReSharper disable NonReadonlyMemberInGetHashCode

namespace Store.Models
{ 
    /// <summary>
    /// Basic shop information
    /// </summary>
    [DataContract]
    public class ShopInfo : IEquatable<ShopInfo>
    { 
        /// <summary>
        /// ID of the shop
        /// </summary>
        /// <value>ID of the shop</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// The store name
        /// </summary>
        /// <value>The store name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The location of the store
        /// </summary>
        /// <value>The location of the store</value>
        [DataMember(Name="location")]
        public string Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShopInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ShopInfo)obj);
        }

        /// <summary>
        /// Returns true if ShopInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ShopInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShopInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ShopInfo left, ShopInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ShopInfo left, ShopInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
